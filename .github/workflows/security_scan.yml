name: Secure Code Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job for Static Application Security Testing (SAST)
  sast_scans:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: Security_Compliance_workshop-aman/day3

      - name: Run Bandit (Python SAST)
        id: bandit
        run: |
          pip install bandit
          bandit -r . -f html -o bandit-report.html || true
        working-directory: Security_Compliance_workshop-aman/day3
        shell: bash
        continue-on-error: true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: Security_Compliance_workshop-aman/day3/bandit-report.html

      - name: Run Semgrep (General SAST)
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/python p/flask p/secrets p/ci
          # FIX: Use 'args' to specify the output file and the target directory to scan.
          args: --sarif -o Security_Compliance_workshop-aman/day3/semgrep.sarif Security_Compliance_workshop-aman/day3
        continue-on-error: true

      - name: Upload Semgrep SARIF Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif-report
          path: Security_Compliance_workshop-aman/day3/semgrep.sarif

  # Job for Secrets Scanning
  secrets_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Gitleaks needs full history to scan

      - name: Run Gitleaks Scan
        uses: zricethezav/gitleaks-action@v1.4.0
        with:
          # FIX: Pass arguments via 'args' instead of using invalid parameters like 'config' or 'report_path'
          args: detect --path=. --config-path=.github/gitleaks.toml --report-path=gitleaks-report.json --verbose --redact
        continue-on-error: true

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  # Job for Dynamic Application Security Testing (DAST)
  dast_scan:
    runs-on: ubuntu-latest
    needs: sast_scans
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: Security_Compliance_workshop-aman/day3

      - name: Start Flask App
        run: |
          nohup python app.py > app.log 2>&1 &
          echo "Waiting for app to start..."
          sleep 15
          curl --fail http://localhost:5000
        working-directory: Security_Compliance_workshop-aman/day3
        shell: bash

      - name: Show logs on failure
        if: failure()
        run: |
          echo "--- App failed to start. Displaying logs from app.log: ---"
          cat app.log
        working-directory: Security_Compliance_workshop-aman/day3

      - name: Run ZAP Baseline Scan via Docker
        continue-on-error: true
        run: |
          # Change ownership of the workspace to the ZAP user (UID 1000)
          sudo chown 1000:1000 ${{ github.workspace }}

          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            -v ${{ github.workspace }}:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://host.docker.internal:5000/ \
            -g gen.conf \
            -J report_json.json \
            -w report_md.md \
            -r report_html.html

      - name: Upload ZAP DAST Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-reports
          path: |
            report_json.json
            report_md.md
            report_html.html