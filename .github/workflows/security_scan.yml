name: Secure Code Scan

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  # Job for Static Application Security Testing (SAST)
  sast_scans:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Bandit (Python SAST)
        id: bandit
        run: |
          pip install bandit
          bandit -r . -f html -o bandit-report.html || true # Continue on error
        shell: bash
        continue-on-error: true # Allow job to continue even if Bandit finds issues

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.html

      - name: Run Semgrep (General SAST)
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/python p/flask p/secrets p/ci
        continue-on-error: true # Allow job to continue even if Semgrep finds issues

      - name: Upload Semgrep SARIF Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif-report
          path: semgrep.sarif

  # Job for Secrets Scanning
  secrets_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Gitleaks needs full history to scan

      - name: Run Gitleaks Scan
        uses: zricethezav/gitleaks-action@v1.4.0
        with:
          config: .github/gitleaks.toml # Optional: custom config
          report_format: json
          report_path: gitleaks-report.json
        continue-on-error: true # Allow job to continue even if Gitleaks finds issues

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  # Job for Dynamic Application Security Testing (DAST)
  dast_scan:
    runs-on: ubuntu-latest
    needs: sast_scans # DAST can run independently or after SAST
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Flask App
        run: |
          nohup python app.py > app.log 2>&1 &
          echo "Waiting for app to start..."
          sleep 10 # Give the app some time to fully start
          curl http://localhost:5000 # Check if app is running
        shell: bash

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: http://localhost:5000
          # Optional: additional ZAP arguments
          # cmd_options: '-addoninstall zaproxy-full-scan' # Example for full scan
          # cmd_options: '-config global.htmlreport.enable=true' # To enable HTML report directly
          # Use '-g zap-report.html' for generating HTML report
          # You might need to adjust the ZAP action version or parameters to get an HTML report directly.
          # For simplicity, we'll focus on the baseline scan's found alerts.
          allow_issue_management: false # Disable creating GitHub issues

      - name: Generate ZAP HTML Report (Manual step if action doesn't create it)
        # This step assumes ZAP generates a report or we can convert it.
        # The zap_action might output to stdout or generate an XML/JSON file.
        # You might need to install 'xsltproc' if converting XML to HTML
        # For this exercise, we'll rely on the ZAP action's output in the workflow log,
        # but ideally, you'd get an HTML report.
        run: echo "ZAP scan completed. Check workflow logs for findings."
        # If the action produced a report file, you'd upload it here:
        # - name: Upload ZAP Report
        #   uses: actions/upload-artifact@v4
        #   with:
        #     name: zap-report
        #     path: zap-report.html # Adjust filename if different